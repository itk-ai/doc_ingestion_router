name: Docker Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TEST_PORT: 49222

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest python-dotenv pydantic-settings requests loguru

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          # Alt tags: local-test-image:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Start services with Docker Compose
        env:
          PORT: ${{ env.TEST_PORT }}
        run: |
          docker compose --profile dev up -d --wait --wait-timeout 30

      - name: Run pytest
        env:
          TEST_PORT: ${{ env.TEST_PORT }}
          API_KEY: default_test_key
          APP_NAME: Document Ingestion Router
          TIKA_USER: dummy
          TIKA_PASSWORD: dummy
          TIKA_BASE_URL: http://dummy.url
        run: |
          pytest -v tests/test_integration.py
          docker compose logs


      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          #tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Clean up
        if: always()
        run: docker compose --profile dev down
